import fs from 'fs';
import path from 'path';

const args = process.argv.slice(2);
const baseLogDir = path.join(process.cwd(), 'logs');

function showHelp() {
  console.log(`
‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  npm run logs -- [options]

Options:
  --year YYYY       ‡∏î‡∏π log ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ (‡πÄ‡∏ä‡πà‡∏ô --year 2024)
  --month MM        ‡∏î‡∏π log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô --month 01)
  --type TYPE       ‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó log (INFO, ERROR, ACTION)
  --search TEXT     ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log
  --tail N         ‡πÅ‡∏™‡∏î‡∏á N ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (default: ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  --help           ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
  npm run logs -- --year 2024 --month 01
  npm run logs -- --year 2024 --type ERROR
  npm run logs -- --search "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"
  npm run logs -- --tail 50
`);
}

function readLogs(year: string, month?: string, options: any = {}) {
  try {
    const yearDir = path.join(baseLogDir, year);
    if (!fs.existsSync(yearDir)) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏õ‡∏µ ${year}`);
      return;
    }

    const logFile = month 
      ? path.join(yearDir, `${year}-${month}.log`)
      : path.join(yearDir, `${year}.log`);

    if (!fs.existsSync(logFile)) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå log');
      return;
    }

    let logs = fs.readFileSync(logFile, 'utf-8').split('\n');

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (options.type) {
      logs = logs.filter(log => log.includes(`${options.type}:`));
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (options.search) {
      logs = logs.filter(log => log.toLowerCase().includes(options.search.toLowerCase()));
    }

    // ‡πÅ‡∏™‡∏î‡∏á N ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (options.tail) {
      logs = logs.slice(-options.tail);
    }

    if (logs.length === 0) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return;
    }

    console.log('\n=== ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Log ===');
    console.log(`üìÖ ‡∏õ‡∏µ: ${year}${month ? ` ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${month}` : ''}`);
    if (options.type) console.log(`üè∑Ô∏è  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${options.type}`);
    if (options.search) console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${options.search}`);
    console.log('========================\n');

    logs.forEach(log => {
      if (log.trim()) {
        console.log(log);
      }
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå log:', error);
  }
}

// ‡πÅ‡∏õ‡∏•‡∏á arguments ‡πÄ‡∏õ‡πá‡∏ô options
if (args.includes('--help')) {
  showHelp();
} else {
  const options: any = {};
  
  for (let i = 0; i < args.length; i += 2) {
    const key = args[i].replace('--', '');
    const value = args[i + 1];
    options[key] = value;
  }

  if (!options.year) {
    options.year = new Date().getFullYear().toString();
  }

  readLogs(options.year, options.month, {
    type: options.type,
    search: options.search,
    tail: options.tail ? parseInt(options.tail) : undefined
  });
}
