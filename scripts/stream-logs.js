//npm run logs:watch

const fs = require('fs');
const path = require('path');

function getTodayLogFile() {
  const date = new Date();
  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  
  const logPath = path.join(
    process.cwd(),
    'logs',
    year.toString(),
    month,
    `${year}-${month}-${day}.log`
  );

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  fs.mkdirSync(path.dirname(logPath), { recursive: true });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  if (!fs.existsSync(logPath)) {
    fs.writeFileSync(logPath, '');
  }

  return logPath;
}

function colorLog(line) {
  if (!line.trim()) return '';
  
  if (line.includes('ERROR:')) {
    return `\x1b[31m${line}\x1b[0m`; // ‡πÅ‡∏î‡∏á
  } else if (line.includes('INFO:')) {
    return `\x1b[36m${line}\x1b[0m`; // ‡∏ü‡πâ‡∏≤
  } else if (line.includes('ACTION:')) {
    return `\x1b[32m${line}\x1b[0m`; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  }
  return line;
}

async function watchLogs() {
  const logFile = getTodayLogFile();
  console.clear();
  console.log('\x1b[35m%s\x1b[0m', 'üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Logs...');
  console.log('\x1b[36m%s\x1b[0m', `üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå: ${logFile}`);
  console.log('\x1b[33m%s\x1b[0m', '‚åõ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà... (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)\n');

  let currentSize = 0;

  // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á logs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  try {
    const content = fs.readFileSync(logFile, 'utf8');
    content.split('\n').forEach(line => {
      if (line.trim()) console.log(colorLog(line));
    });
    currentSize = fs.statSync(logFile).size;
  } catch (error) {
    console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå log ‡πÑ‡∏î‡πâ:', error);
    return;
  }

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
  const watcher = fs.watch(logFile, (eventType) => {
    if (eventType === 'change') {
      try {
        const stats = fs.statSync(logFile);
        if (stats.size > currentSize) {
          const buffer = Buffer.alloc(stats.size - currentSize);
          const fd = fs.openSync(logFile, 'r');
          fs.readSync(fd, buffer, 0, buffer.length, currentSize);
          fs.closeSync(fd);

          const newContent = buffer.toString();
          newContent.split('\n').forEach(line => {
            if (line.trim()) {
              console.log(colorLog(line));
            }
          });
          
          currentSize = stats.size;
        }
      } catch (error) {
        if (error.code !== 'ENOENT') {
          console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:', error);
        }
      }
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô
  setInterval(() => {
    const newLogFile = getTodayLogFile();
    if (newLogFile !== logFile) {
      watcher.close();
      console.log('\n\x1b[35m%s\x1b[0m', 'üìÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡πÉ‡∏´‡∏°‡πà...\n');
      watchLogs();
    }
  }, 1000);

  process.on('SIGINT', () => {
    watcher.close();
    console.log('\n\x1b[35m%s\x1b[0m', 'üëã ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Logs');
    process.exit(0);
  });
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
watchLogs().catch(console.error);
